@model MEDWebInterface.Models.SearchQuery
@{
    ViewBag.Title = "Search";
}
<script type="text/javascript" language="javascript" src="~/Scripts/searchform.js"></script>
@using MEDWebInterface.Models;
@if (TempData.Keys.Contains("ex"))
{
    <!--Show error feedback contained in TempData-->
    <label class="alert-danger" style="padding: 15px; border-radius: 5%; margin-top: 50px;">@TempData["ex"]</label>
}
@using (Html.BeginForm("Submit", "Search", FormMethod.Post))
{
    <div style="align-items:center; justify-content:center; display:flex;">
        <div class="img_overlay" style="display:block; padding:2em;">
            <h3 class="display-4">@ViewBag.Title.</h3>
            <div class="search_div">
                <div class="btn-group btn-group-toggle" data-toggle="buttons">
                    <label class="btn btn-outline-danger search_config" onchange="ChangeText(0); ChangeTextbox(0);">
                        @Html.RadioButtonFor(x => x.Type, SearchType.all, new { @style = "display:none;" }) All
                    </label>
                    <label class="btn btn-outline-danger search_config active" onchange="ChangeText(0); ChangeTextbox(0);">
                        @Html.RadioButtonFor(x => x.Type, SearchType.transliteration, new { @style = "display:none;", @checked = "checked" }) Transliteration
                    </label>
                    <label class="btn btn-outline-danger search_config" id="translationradio" onchange="ChangeText(1); ChangeTextbox(0);">
                        @Html.RadioButtonFor(x => x.Type, SearchType.translation, new { @style = "display:none;" }) Translation
                    </label>
                    <label class="btn btn-outline-danger search_config" onchange="ChangeText(0); ChangeTextbox(1); ">
                        @Html.RadioButtonFor(x => x.Type, SearchType.gardiner, new { @style = "display:none;" }) Gardiner Sign
                    </label>
                </div>
            </div>

            <div class="search_div">
                <div class="input-group">
                    @Html.TextBoxFor(x => x.Query, htmlAttributes: new { @class = "form-control", @placeholder = "Search...", @id = "regular-input" })
                    <select class="js-example-basic-multiple" multiple="multiple" onchange="SelectClick()">
                    </select>
                    <span class="input-group-btn">
                        <button class="btn btn-outline-dark" type="submit" value="Submit">
                            <i class="fas fa-search"></i>
                            Search
                        </button>
                    </span>
                    @Html.TextBoxFor(x => x.SignQuery, htmlAttributes: new { @style = "display: none;", @id = "SignQuery"})
                </div>
            </div>
            <div style="display:flex;">
                <div class="search_div">
                    <label id="exact-match" class="my-toggle btn btn-outline-danger search_config active" for="exactmatchcheck">
                        @Html.CheckBoxFor(x => x.ExactMatch, htmlAttributes: new { @autocomplete = "off", @style = "display:none;", @class = "toggle-check", @checked = "checked", @id = "exactmatchcheck", @onclick = "MyToggle(0)" })
                        Exact Match
                    </label>
                </div>

                <div class="search_div">
                    <label id="formatted-toggle" class="my-toggle btn btn-outline-danger search_config active">
                        @Html.CheckBoxFor(x => x.DisplayFormatted, htmlAttributes: new { @autocomplete = "off", @style = "display:none;", @class = "toggle-check", @checked = "checked", @onclick = "MyToggle(1)" })
                        Display Formatted
                    </label>
                </div>
            </div>
        </div>
    </div>
}